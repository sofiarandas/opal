/* BSD 2-Clause License - see OPAL/LICENSE for details. */
package org.opalj
package tac

import org.opalj.ba.{InsertionPosition, LabeledCode}
import org.opalj.br.Method
import org.opalj.br.analyses.Project
import org.opalj.br.instructions.{INVOKEVIRTUAL, NOP, RETURN}
import org.opalj.value.ValueInformation

import java.io.File
import scala.collection.mutable.ArrayBuffer

object TACtoBC {

  /**
   * Compiles the Three-Address Code (TAC) representation for all methods in the given .class file.
   *
   * @param file A File object representing the .class file to be analyzed and compiled into TAC.
   * @return A Map associating each method in the class file with its corresponding TAC representation.
   */
  def compileTAC(file: File): Map[Method, AITACode[TACMethodParameter, ValueInformation]] = {
    val p = Project(file)
    val tacProvider = p.get(LazyDetachedTACAIKey)

    // Store the TAC results in a map
    val methodTACMap = scala.collection.mutable.Map.empty[Method, AITACode[TACMethodParameter, ValueInformation]]

    for {
      cf <- p.allProjectClassFiles
      m <- cf.methods
      if m.body.isDefined
    } {
      val tac = tacProvider(m)
      methodTACMap += (m -> tac)
    }

    methodTACMap.toMap
  }

  /**
   * Compiles and prints the bytecode representation for all methods in the given .class file.
   *
   * @param file The .class file or JAR archive to be analyzed.
   * @return A Map associating each method in the class file with its bytecode instructions.
   */
  def compileByteCode(file: File): Map[Method, Array[String]] = {
    val p = Project(file)

    // A map to store the bytecode representation of each method
    val methodByteCodeMap = scala.collection.mutable.Map.empty[Method, Array[String]]

    for {
      cf <- p.allProjectClassFiles
      method <- cf.methods
      if method.body.isDefined
    } {
      // Convert the body's instructions to a human-readable format
      val instructions = method.body.get.instructions.zipWithIndex.map { case (instr, index) =>
        s"$index: ${instr}"
      }
      methodByteCodeMap += (method -> instructions.toArray)

      // Print the bytecode for each method
      println(s"Method: ${method.toJava}")
      instructions.foreach(println)
    }

    methodByteCodeMap.toMap
  }

  /**
   * Translates the TAC representations of methods back to bytecode, encapsulated within OPAL's Code structure.
   *
   * This method iterates over each method's TAC representation and generates a corresponding sequence of
   * bytecode instructions, effectively reversing the process of TAC generation. The resulting bytecode
   * is suitable for execution by the JVM.
   *
   * @param tacs A Map containing the TAC representations of methods to be translated back to bytecode.
   * @return A Map associating each method with its newly generated bytecode, wrapped in OPAL's Code structure.
   */
  def translateTACtoBC(tacs: Map[Method, AITACode[TACMethodParameter, ValueInformation]]): Map[Method, LabeledCode] = {
    tacs.map { case (method, tacCode) =>
      // Convert the TAC representation back to bytecode for each method
      val bytecodeInstructions = translateSingleTACtoBC(tacCode)
      method -> bytecodeInstructions
    }
  }

  /**
   * Converts the TAC representation of a single method into bytecode instructions.
   *
   * This helper method processes one method's TAC representation at a time, converting it into a sequence
   * of bytecode instructions. It handles various types of TAC statements and expressions, translating them
   * into their equivalent bytecode form.
   *
   * @param tac The TAC representation of a method to be converted into bytecode.
   * @return An array of bytecode instructions representing the method's functionality, ready to be executed by the JVM.
   */
  def translateSingleTACtoBC(tac: AITACode[TACMethodParameter, ValueInformation]): LabeledCode = {
    val labeledCode = new LabeledCode(
      originalCode = null, // Since we are starting from scratch, there's no original code
      instructions = ArrayBuffer.fill(tac.stmts.length)(NOP)
    )
    tac.stmts.foreach {
     /* case ReturnValue(pc, expr) =>
        expr match {
          case UVar(_, value) =>
            value match {
              case _: IntValue => labeledCode.insert(pc, InsertionPosition.At, Seq(IRETURN)); println("it was an IRETURN :D")
              case _: LongValue => labeledCode.insert(pc, InsertionPosition.At, Seq(LRETURN))
              case _: FloatValue => labeledCode.insert(pc, InsertionPosition.At, Seq(FRETURN))
              case _: DoubleValue => labeledCode.insert(pc, InsertionPosition.At, Seq(DRETURN)); println("it was a DRETURN :D")
              // Additional cases as necessary, e.g., for object references (ARETURN)
            }
        }*/
      case Assignment(pc, targetVar, expr) =>

      case VirtualMethodCall(pc, declaringClass, isInterface, name, descriptor, receiver, params) =>
        if(isInterface) {
          //labeledCode.insert(pc, InsertionPosition.At, Seq(INVOKEINTERFACE(declaringClass, name, descriptor)))
        } else {
          labeledCode.insert(pc, InsertionPosition.Before, Seq(INVOKEVIRTUAL(declaringClass, name, descriptor)))
          println("Go Sofiiiii :D")
        }
      case Return(pc) => labeledCode.insert(pc, InsertionPosition.Before, Seq(RETURN))
      case If(pc, left, condition, right, target) => println("it was an if")
      case _ =>
    }

    labeledCode

  }

  def main(args: Array[String]): Unit = {
    if (args.length != 1) {
      println("Usage: TACtoBC <path to class or jar file>")
      return
    }

    val file = new File(args(0))
    if (!file.exists()) {
      println(s"File ${file.getPath} does not exist.")
      return
    }

    compileByteCode(file)

    val tacs = compileTAC(file)

    // Print out TAC
    tacs.foreach { case (method, tac) =>
      tac.detach()
      println(s"Method: ${method.toJava}")
      println(tac.toString)
      println("\n")

    }

    // Print out the translation from TAC to Bytecode
    val byteCodes = translateTACtoBC(tacs)
    byteCodes.foreach { case (method, bytecode) =>
      println(s"Method: ${method.toJava}")
      println(bytecode.toString)
    }

  }
}
